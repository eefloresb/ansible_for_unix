---
### Note technique from redhat 
#https://access.redhat.com/solutions/420283
#https://access.redhat.com/solutions/4278651
- name: "do backup a file of sshd_config" 
  copy: 
    src: /etc/ssh/sshd_config 
    dest: /etc/ssh/sshd_config.bkp
    remote_src: true

- name: apply patch in RHEL>=7 to KexAlgorithms
  when: 
   - ansible_os_family == 'RedHat' 
   - ansible_distribution_major_version | int >= 7 
  block: 

    - name: capture data in a file 7/8
      shell: ssh -Q kex > /tmp/ssh_kex.txt  

    - name: delete algorithms of file ssh_kex.txt 7/8 
      lineinfile: 
        path: /tmp/ssh_kex.txt
        regexp: '{{item}}'
        state: absent
      loop: '{{ssh_kex}}' 
  
    - slurp: 
        src: /tmp/ssh_kex.txt 
      register: slurpfile 
    
    - set_fact: 
        contents: "{{ slurpfile['content'] | b64decode | trim }}"

    - vars:
        exclude_list: "{{ contents.split('\n')}}"
      lineinfile:
         line: "KexAlgorithms {{ exclude_list | join(',') }}"
         path: /etc/ssh/sshd_config 
         validate: '/sbin/sshd -t -f %s'

  #    - name: add line "KexAlgorithms" to file sshd_config 7/8
  #      lineinfile:
  #        path: /etc/ssh/sshd_config 
  #        line: "KexAlgorithms " 
  #        state: present 
  #
  #    - name: insert data of the text in sshd_config 7/8
  #      shell: |  
  #          sed -ir '/KexAlgorithms/s/$/\,{{item}}/' /etc/ssh/sshd_config
  #      loop: 
  #          "{{ssh_kex_result.stdout_lines }}"  
  #
  #    - name: delete first a comme the what insert in sshd_config
  #      replace: 
  #          path: /etc/ssh/sshd_config  
  #          regexp: '^KexAlgorithms(\s+)\,'
  #          replace: 'KexAlgorithms\1'
  #          validate: '/sbin/sshd -t -f %s'

    - name: to redhat 8 apply CRYPTO_POLICY 
      when: ansible_distribution_major_version | int == 8
      lineinfile:
        path: /etc/sysconfig/sshd 
        regexp: '^#\s+CRYPTO_POLICY='  
        line: 'CRYPTO_POLICY='

- name: apply patch in RHEL==6 to KexAlgorithms
  when: 
   - ansible_os_family == 'RedHat' 
   - ansible_distribution_major_version | int == 6
  block: 
   
    - name: copy content in file remote tmp 
      lineinfile: 
        line: "{{ item }}"
        dest: /tmp/ssh_kex.txt  
        state: present 
        create: true
      loop: '{{ssh_kex_rh6}}'

    - name: delete algorithms of file ssh_kex.txt  
      lineinfile: 
        path: /tmp/ssh_kex.txt
        regexp: '{{item}}'
        state: absent
      loop: '{{ssh_kex}}' 

    - slurp: 
        src: /tmp/ssh_kex.txt 
      register: slurpfile 
    
    - set_fact: 
        contents: "{{ slurpfile['content'] | b64decode | trim }}"

    - vars:
        exclude_list: "{{ contents.split('\n') }}"
      lineinfile:
          line: "KexAlgorithms {{ exclude_list | join(',') }}"
          path: /etc/ssh/sshd_config 
    #      validate: '/sbin/sshd -t -f %s'

  #      register: ssh_kex_result 
  #
  #    - name: add line "KexAlgorithms" to file sshd_config 
  #      lineinfile:
  #        path: /etc/ssh/sshd_config 
  #        line: "KexAlgorithms " 
  #        state: present 
  #  
  #    - name: insert data of the text in sshd_config 
  #      shell: |  
  #          sed -ir '/KexAlgorithms /s/$/\,{{item}}/' /etc/ssh/sshd_config
  #      loop: 
  #        "{{ssh_kex_result.stdout_lines}}"  
  #
  #    - name: delete first a comme the what insert in sshd_config
  #      replace: 
  #        path: /etc/ssh/sshd_config  
  #        regexp: '^KexAlgorithms(\s+)\,'
  #        replace: 'KexAlgorithms\1'
  #        validate: '/sbin/sshd -t -f %s'
 
    - name: copy content in tmp file 
      lineinfile: 
        line: "{{ item }}"
        dest: /tmp/ssh_cipher.txt
        state: present
        create: true
      loop: '{{ssh_cipher_rh6}}' 

    - name: delete cipher of file ssh_cipher.txt 
      lineinfile: 
        path: /tmp/ssh_cipher.txt 
        regexp: '{{item}}'
        state: absent 
      loop: '{{ssh_cipher}}' 

    - slurp: 
        src: /tmp/ssh_cipher.txt 
      register: slurpfile 

    - set_fact: 
        contents: "{{ slurpfile['content'] | b64decode | trim}}"

    - vars:
        exclude_list: "{{ contents.split('\n') }}"
      lineinfile:
        path: /etc/ssh/sshd_config  
        line: "Ciphers {{ exclude_list | join(',') }}" 
    #validate: '/sbin/sshd -t -f %s'
  #   lineinfile:
#        line: "Ciphers {{ exclude_list | join(',') }}"
#         path: /etc/ssh/sshd_config 
    #      validate: '/sbin/sshd -t -f %s'

  #- vars: 
  #      contentx: "{{ lookup('file','/tmp/ssh_cip.txt') }}"
  #      exclude_listx: "{{ contentx.split('\n')}}"
  #    lineinfile: 
  #      line: "Ciphers {{ exclude_listx | join(',') }}" 
#      path: /etc/ssh/sshd_config 
    #validate: '/sbin/sshd -t -f %s'

  #    - name: capture values of ssh_kex.txt 
  #      shell: cat /tmp/ssh_cipher.txt 
  #      register: ssh_cipher_result 
  #
  #    - name: add line "Ciphers" to file sshd_config 
  #      lineinfile:
  #        path: /etc/ssh/sshd_config 
  #        line: "Ciphers " 
  #        state: present 
  #  
  #    - name: insert data of the text in sshd_config 
  #      shell: |  
  #          sed -ir '/Ciphers /s/$/\,{{item}}/' /etc/ssh/sshd_config
  #      loop: 
  #        "{{ssh_cipher_result.stdout_lines}}"  
  #
  #    - name: delete first a comme the what insert in sshd_config
  #      replace: 
  #        path: /etc/ssh/sshd_config  
  #        regexp: '^Ciphers(\s+)\,'
  #        replace: 'Ciphers\1'
  #        validate: '/sbin/sshd -t -f %s'

- name: apply patch in RHEL 7 to Ciphers
  when: 
   - ansible_os_family == 'RedHat' 
   - ansible_distribution_major_version | int >= 7 
  block:
    
    - name: capture data in a file to ssh_cipher 7
      shell: ssh -Q cipher > /tmp/ssh_cipher.txt 

    - name: delete algorithms of file ssh_cipher.txt 7  
      lineinfile: 
        path: /tmp/ssh_cipher.txt 
        regexp: '{{item}}'
        state: absent 
      loop: '{{ssh_cipher}}'

    - slurp: 
        src: /tmp/ssh_cipher.txt 
      register: slurpfile 

    - set_fact: 
        contents: "{{ slurpfile['content'] | b64decode | trim}}"

    - vars:
        exclude_list: "{{ contents.split('\n')}}"
      lineinfile:
         line: "Ciphers {{ exclude_list | join(',') }}"
         path: /etc/ssh/sshd_config 
         validate: '/sbin/sshd -t -f %s'

  #    - name: add line "Ciphers" to file sshd_config 7 
  #      lineinfile:
  #        path: /etc/ssh/sshd_config 
  #        line: "Ciphers " 
  #        state: present 
  #
  #    - name: add line "Ciphers" to file sshd_config 7
  #      shell: | 
  #          sed -ir '/Ciphers /s/$/\,{{item}}/' /etc/ssh/sshd_config
  #      loop: 
  #        "{{ssh_cipher_result.stdout_lines}}"  
  #
  #    - name: delete first a comme the what insert in sshd_config
  #      replace: 
  #        path: /etc/ssh/sshd_config  
  #        regexp: '^Ciphers(\s+)\,'
  #        replace: 'Ciphers\1'
  #        validate: '/sbin/sshd -t -f %s'

- name: find the ChallengeResponseAuthentication to NO 
  lineinfile: 
    path: /etc/ssh/sshd_config 
    regexp: '^ChallengeResponseAuthentication.*'
    line: 'ChallengeResponseAuthentication no'
    validate: '/sbin/sshd -t -f %s'

- name: validate file create 
  shell: | 
      sshd -t 
  register: sshd_result 

- name: restart daemon to apply changes 
  when: sshd_result.rc == 0 
  shell: | 
    echo "validate service and restart"
  notify: restart sshd

#- name: check the exists file in remote server to version Linux
#  stat: 
#    path: /etc/crypto-policies/back-ends/openssh.config 
#  register: file_result  
#
#- name: check the exists file ssh_config in remote server to version Linux 
#  stat: 
#    path: /etc/ssh/ssh_config
#  register: ssh_result 
#
#- debug: 
#    var: "{{item}}"
#  loop: 
#    - file_result
#    - ssh_result
#
#- name: The following weak key exhcange algorithms are enabled  diffie-hellman-group-exchange-sha1 
#  when: file_result.stat.exists == true or ssh_result.stat.exists == true
#  lineinfile:
#    path: "{{item.dir}}" 
#    regexp: "{{item.ssh}}"
#    line: ""
#    backup: yes
#  loop: 
#  - { dir: '{{dir_remote}}', ssh: '{{ssh_values}}' } 
#  

#- name: the following weak key exchange algorithms are enabled 
#  when: file_result.exists == true or ssh_result.exits == true
#  lineinfile:
#    path: "{{item}}" 
#    regexp: "{{item}}"
#    line:  ""
#    backup: yes
#  loop: 
#    - ",diffie-hellman-group-exchange-sha1"
#    - ",diffie-hellman-group1-sha1"
#
#- name: remove cifher block chaining 
#  when: file_result.exists == true or ssh_result.exits == true
#  lineinfile:
#    regexp: "{{item}}"
#    path: /etc/ssh/ssh_config 
#    line: ""
#    backup: yes 
#  loop: 
#    - ",aes128-cbc"
#    - ",aes256-cbc"
#    - ",3des-cbc"
#    - ",aes192-cbc"
#
#

---
- name: Capture version of operative system
  ansible.builtin.set_fact:
    os_version: "{{ ansible_distribution_version }}"

- name: Capture user from remote server
  ansible.builtin.set_fact:
    os_user: "{{ ansible_env.SUDO_USER }}"

- name: Restart the time ntp
  when: 1 == 2
  ansible.builtin.service:
    name: "systemd-timesyncd"
    state: restarted

- name: Kill process apt
  when: 1 == 2
  ansible.builtin.command:
    cmd: pkill -f apt
  register: cmd_kill
  changed_when: cmd_kill.rc != 0

# Assigned values to architecture
- name: Capture deb-architecture of Operating System
  ansible.builtin.command: dpkg --print-architecture
  register: dpkg_architecture
  changed_when: dpkg_architecture.rc != 0

# Create directories
- name: Create directory for /etc/apt/keyring
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

# include task to configure repositories
- name: Configure repositories
  ansible.builtin.include_tasks:
    file: configure_repo.yml

- name: Run the equivalent of "apt-get update"
  ansible.builtin.apt:
    update_cache: true

- name: Install package extras
  ansible.builtin.include_tasks:
    file: install_programs.yml

- name: Install package extras
  ansible.builtin.include_tasks:
    file: configure_firewall.yml

- name: Change shell to my user
  ansible.builtin.shell: |
    set -o pipefail
    usermod -s /usr/bin/fish "{{ os_user }}"
  register: user_fish
  changed_when: user_fish.rc != 0
  args:
    executable: /bin/bash

- name: Configure the tflint
  ansible.builtin.shell: |
    set -o pipefail
    curl -s "{{ tflint_url }}" | bash
  register: nerd_fonts_1
  changed_when: nerd_fonts_1.rc != 0
  args:
    chdir: /tmp
    executable: /bin/bash

- name: Install plugins for nvim with sudo
  community.general.npm:
    name: "{{ item }}"
    global: true
  loop: "{{ npm_packages_sudo }}"

- name: Configure Users
  ansible.builtin.include_tasks:
    file: configure_users.yml
